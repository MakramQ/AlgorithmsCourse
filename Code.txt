import time

def bubble_sort_iterative(file_path):
    with open(file_path, 'r') as file:
        data = [int(line) for line in file]

    n = len(data)
    for i in range(n - 1):
        # Each iteration pushes the largest element to the end of the list
        for j in range(n - i - 1):
            if data[j] > data[j + 1]:
                data[j], data[j + 1] = data[j + 1], data[j]

    return data


def insertion_sort_iterative(file_path):
    with open(file_path, 'r') as file:
        data = [int(line) for line in file]

    for i in range(1, len(data)):
        key = data[i]
        j = i - 1
        while j >= 0 and data[j] > key:
            data[j + 1] = data[j]
            j -= 1
        data[j + 1] = key

    return data


def selection_sort_iterative(file_path):
    with open(file_path, 'r') as file:
        data = [int(line) for line in file]

    for i in range(len(data)):
        min_index = i
        for j in range(i + 1, len(data)):
            if data[j] < data[min_index]:
                min_index = j
        data[i], data[min_index] = data[min_index], data[i]

    return data


def quick_sort_iterative(file_path):
    with open(file_path, 'r') as file:
        data = [int(line) for line in file]

    if len(data) <= 1:
        return data

    stack = []
    stack.append((0, len(data) - 1))

    while stack:
        low, high = stack.pop()

        if low < high:
            pivot = partition(data, low, high)

            # Push the indices of the sublists created by the partitioning
            stack.append((low, pivot - 1))
            stack.append((pivot + 1, high))

    return data


def partition(data, low, high):
    pivot_index = choose_pivot(low, high)
    pivot_value = data[pivot_index]
    data[pivot_index], data[high] = data[high], data[pivot_index]
    border = low

    for i in range(low, high):
        if data[i] < pivot_value:
            data[i], data[border] = data[border], data[i]
            border += 1

    data[high], data[border] = data[border], data[high]
    return border


def choose_pivot(low, high):
    # You can choose different pivot selection strategies here
    # For simplicity, this implementation selects the rightmost element
    return high


def merge_sort_iterative(file_path):
    with open(file_path, 'r') as file:
        data = [int(line) for line in file]

    if len(data) <= 1:
        return data

    # Create a list of sublists, each containing a single element
    sublists = [[value] for value in data]

    # Merge sublists until only one remains
    while len(sublists) > 1:
        merged_sublists = []

        # Merge adjacent sublists and store the result in merged_sublists
        i = 0
        while i < len(sublists) - 1:
            merged_sublists.append(merge(sublists[i], sublists[i + 1]))
            i += 2

        # If there's an odd number of sublists, append the last one as is
        if i == len(sublists) - 1:
            merged_sublists.append(sublists[-1])

        sublists = merged_sublists

    return sublists[0]


def merge(left, right):
    merged = []
    i = j = 0

    # Merge the two sublists while maintaining sorted order
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1

    # Append any remaining elements from the left sublist
    while i < len(left):
        merged.append(left[i])
        i += 1

    # Append any remaining elements from the right sublist
    while j < len(right):
        merged.append(right[j])
        j += 1

    return merged


# Usage example
file_path = '75000.txt'  # Replace with the path to your data file

start_time = time.time()
sorted_data_bubble = bubble_sort_iterative(file_path)
end_time = time.time()
execution_time_bubble = end_time - start_time
print("Bubble Sort Execution Time:", execution_time_bubble)

start_time = time.time()
sorted_data_insertion = insertion_sort_iterative(file_path)
end_time = time.time()
execution_time_insertion = end_time - start_time
print("Insertion Sort Execution Time:", execution_time_insertion)

start_time = time.time()
sorted_data_selection = selection_sort_iterative(file_path)
end_time = time.time()
execution_time_selection = end_time - start_time
print("Selection Sort Execution Time:", execution_time_selection)

start_time = time.time()
sorted_data_quick = quick_sort_iterative(file_path)
end_time = time.time()
execution_time_quick = end_time - start_time
print("Quick Sort Execution Time:", execution_time_quick)

start_time = time.time()
sorted_data_merge = merge_sort_iterative(file_path)
end_time = time.time()
execution_time_merge = end_time - start_time
print("Merge Sort Execution Time:", execution_time_merge)